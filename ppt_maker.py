from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN
from pptx.enum.shapes import MSO_SHAPE
import io
import requests
from PIL import Image
import re

def download_image(url):
    """Download image from URL and return as BytesIO"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return io.BytesIO(response.content)
    except Exception as e:
        print(f"Error downloading image: {str(e)}")
        return None

def clean_text(text):
    """Clean unwanted symbols and whitespace"""
    if not text:
        return ""
    
    # Remove special markers and formatting symbols
    unwanted = ['#*', '***', 'ðŸ§ ', '**', '__']
    for u in unwanted:
        text = text.replace(u, '')
    
    # Remove multiple newlines and excessive whitespace
    text = re.sub(r'\n\s*\n', '\n\n', text)
    text = re.sub(r' +', ' ', text)
    
    # Remove leading/trailing whitespace
    return text.strip()

def add_title_slide(prs, lesson_data):
    """Add title slide with gradient background"""
    slide = prs.slides.add_slide(prs.slide_layouts[5])  # Blank layout

    # Gradient background
    left = top = Inches(0)
    width = prs.slide_width
    height = prs.slide_height
    background = slide.shapes.add_shape(MSO_SHAPE.RECTANGLE, left, top, width, height)
    fill = background.fill
    fill.gradient()
    fill.gradient_stops[0].color.rgb = RGBColor(58, 12, 163)
    fill.gradient_stops[1].color.rgb = RGBColor(106, 13, 173)
    background.line.fill.background()

    # Title
    title_box = slide.shapes.add_textbox(Inches(1), Inches(2), Inches(11), Inches(2))
    title_frame = title_box.text_frame
    title_frame.clear()
    p = title_frame.paragraphs[0]
    p.text = f"{lesson_data['subject']}: {lesson_data['topic']}"
    p.font.size = Pt(48)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER

    # Subtitle
    subtitle_box = slide.shapes.add_textbox(Inches(1), Inches(4), Inches(11), Inches(1))
    subtitle_frame = subtitle_box.text_frame
    p = subtitle_frame.paragraphs[0]
    p.text = f"{lesson_data['grade']} | {lesson_data['curriculum']}"
    p.font.size = Pt(26)
    p.font.color.rgb = RGBColor(220, 220, 255)
    p.alignment = PP_ALIGN.CENTER

    # Footer with company name
    footer_box = slide.shapes.add_textbox(Inches(1), Inches(6.8), Inches(11), Inches(0.5))
    footer_frame = footer_box.text_frame
    p = footer_frame.paragraphs[0]
    p.text = "Generated by EduGenius Pro"
    p.font.size = Pt(14)
    p.font.color.rgb = RGBColor(200, 200, 255)
    p.alignment = PP_ALIGN.CENTER

def add_content_slide(prs, title_text, content_text=None, image_url=None):
    """Add a content slide with optional image"""
    slide = prs.slides.add_slide(prs.slide_layouts[5])  # Blank layout for full control

    # Title
    title_box = slide.shapes.add_textbox(Inches(0.7), Inches(0.5), Inches(12), Inches(1))
    tf = title_box.text_frame
    tf.clear()
    p = tf.paragraphs[0]
    p.text = clean_text(title_text)
    p.font.size = Pt(36)
    p.font.bold = True
    p.font.color.rgb = RGBColor(58, 12, 163)
    p.alignment = PP_ALIGN.LEFT

    # Clean content
    content_text = clean_text(content_text) if content_text else None

    # Layout based on whether we have an image
    if image_url:
        # Two-column layout for image + text
        content_box = slide.shapes.add_textbox(Inches(0.7), Inches(1.5), Inches(5.5), Inches(5))
        img_left = Inches(6.5)
        img_top = Inches(1.5)
        img_height = Inches(4.5)
    else:
        # Full-width text layout
        content_box = slide.shapes.add_textbox(Inches(0.7), Inches(1.5), Inches(11.5), Inches(5.2))

    # Add content text with proper formatting
    content_tf = content_box.text_frame
    content_tf.word_wrap = True  # Enable word wrap
    content_tf.clear()
    
    if content_text:
        # Split into paragraphs and handle overflow
        paragraphs = [p.strip() for p in content_text.split('\n') if p.strip()]
        current_slide = slide
        current_box = content_box
        current_tf = content_tf
        
        for para in paragraphs:
            # Check if we need to create a new slide for overflow
            if len(current_tf.paragraphs) > 0 and current_tf.paragraphs[-1].text:
                # Estimate if adding another paragraph would overflow
                line_count = sum(len(p.text.split('\n')) for p in current_tf.paragraphs)
                if line_count > 15 and image_url is None:  # Approximate line limit
                    # Create continuation slide
                    new_slide = prs.slides.add_slide(prs.slide_layouts[5])
                    new_title_box = new_slide.shapes.add_textbox(Inches(0.7), Inches(0.5), Inches(12), Inches(1))
                    new_tf = new_title_box.text_frame
                    p = new_tf.paragraphs[0]
                    p.text = f"{clean_text(title_text)} (Continued)"
                    p.font.size = Pt(36)
                    p.font.bold = True
                    p.font.color.rgb = RGBColor(58, 12, 163)
                    
                    # New content box
                    current_box = new_slide.shapes.add_textbox(Inches(0.7), Inches(1.5), Inches(11.5), Inches(5.2))
                    current_tf = current_box.text_frame
                    current_tf.word_wrap = True
                    current_slide = new_slide
            
            p = current_tf.add_paragraph()
            p.text = para
            p.font.size = Pt(18) if image_url else Pt(20)
            p.font.color.rgb = RGBColor(40, 40, 40)
            p.space_after = Pt(6)

    # Add image if provided (after text to ensure it doesn't overlap)
    if image_url:
        img_bytes = download_image(image_url)
        if img_bytes:
            try:
                # Verify image is valid
                Image.open(img_bytes).verify()
                img_bytes.seek(0)
                
                # Add image with proper positioning
                pic = current_slide.shapes.add_picture(img_bytes, img_left, img_top, height=img_height)

                # Add image credit at bottom right
                credit_box = current_slide.shapes.add_textbox(
                    img_left, 
                    img_top + img_height + Inches(0.1), 
                    Inches(4), 
                    Inches(0.3))
                credit_frame = credit_box.text_frame
                p = credit_frame.add_paragraph()
                p.text = "Image from Unsplash"
                p.font.size = Pt(10)
                p.font.color.rgb = RGBColor(150, 150, 150)
            except Exception as e:
                print(f"Error adding image: {str(e)}")

def add_quiz_slide(prs, quiz_type, questions):
    """Add a slide for a specific quiz type"""
    if not questions:
        return
    
    title_map = {
        'mcq': "Multiple Choice Questions",
        'fillblank': "Fill in the Blanks",
        'descriptive': "Descriptive Questions"
    }
    
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    
    # Title
    title_box = slide.shapes.add_textbox(Inches(0.7), Inches(0.5), Inches(12), Inches(1))
    tf = title_box.text_frame
    tf.clear()
    p = tf.paragraphs[0]
    p.text = f"Assessment: {title_map[quiz_type]}"
    p.font.size = Pt(36)
    p.font.bold = True
    p.font.color.rgb = RGBColor(58, 12, 163)
    p.alignment = PP_ALIGN.LEFT
    
    # Content
    content_box = slide.shapes.add_textbox(Inches(0.7), Inches(1.5), Inches(11.5), Inches(5.2))
    content_tf = content_box.text_frame
    content_tf.word_wrap = True
    content_tf.clear()
    
    for i, question in enumerate(questions[:3], 1):  # Limit to 3 questions per slide
        # Question
        p = content_tf.add_paragraph()
        p.text = f"{i}. {clean_text(question.get('question', 'Question'))}"
        p.font.size = Pt(18)
        p.font.bold = True
        p.space_after = Pt(6)
        
        # Options/Answer based on type
        if quiz_type == 'mcq':
            options = "\n".join([f"   â—‹ {clean_text(opt)}" for opt in question.get('options', [])])
            p = content_tf.add_paragraph()
            p.text = options
            p.font.size = Pt(16)
        elif quiz_type == 'fillblank':
            p = content_tf.add_paragraph()
            p.text = f"   Answer: {clean_text(question.get('answer', 'N/A'))}"
            p.font.size = Pt(16)
        
        # Explanation if available
        if question.get('explanation'):
            p = content_tf.add_paragraph()
            p.text = f"   Explanation: {clean_text(question['explanation'])}"
            p.font.size = Pt(14)
            p.font.italic = True
            p.font.color.rgb = RGBColor(100, 100, 100)
        
        # For descriptive questions, add key points
        if quiz_type == 'descriptive' and question.get('key_points'):
            p = content_tf.add_paragraph()
            p.text = "   Key Points:"
            p.font.size = Pt(16)
            for point in question.get('key_points', []):
                p = content_tf.add_paragraph()
                p.text = f"     â€¢ {clean_text(point)}"
                p.font.size = Pt(14)
        
        p = content_tf.add_paragraph()  # Add space between questions
        p.space_after = Pt(12)

def generate_ppt(lesson_data):
    """Generate a PowerPoint presentation from the lesson content"""
    try:
        prs = Presentation()
        prs.slide_width = Inches(13.333)
        prs.slide_height = Inches(7.5)

        # Set default values if not provided
        lesson_data.setdefault('subject', 'Subject')
        lesson_data.setdefault('topic', 'Topic')
        lesson_data.setdefault('grade', 'Grade')
        lesson_data.setdefault('curriculum', 'Curriculum')
        lesson_data.setdefault('objectives', 'No objectives provided')
        lesson_data.setdefault('subtopics', [])
        lesson_data.setdefault('summary', 'No summary provided')
        lesson_data.setdefault('references', [])
        lesson_data.setdefault('quiz_data', {'mcq': [], 'fillblank': [], 'descriptive': []})
        lesson_data.setdefault('selected_images', {})
        lesson_data.setdefault('unsplash_images', {})

        # Title slide
        add_title_slide(prs, lesson_data)

        # Overview
        overview_text = (
            f"Curriculum: {lesson_data['curriculum']}\n"
            f"Grade: {lesson_data['grade']}\n"
            f"Subject: {lesson_data['subject']}\n"
            f"Topic: {lesson_data['topic']}"
        )
        add_content_slide(prs, "Lesson Overview", overview_text)

        # Objectives
        if isinstance(lesson_data['objectives'], str):
            objectives = lesson_data['objectives'].split('\n')
        else:
            objectives = ["No objectives provided"]
        objectives_text = "\n".join([f"â€¢ {clean_text(obj)}" for obj in objectives if obj.strip()])
        add_content_slide(prs, "Learning Objectives", objectives_text)

        # Subtopics with images
        for i, subtopic in enumerate(lesson_data['subtopics'], 1):
            if not isinstance(subtopic, dict):
                continue
                
            subtopic_key = f"{subtopic.get('title', '')}_{i}"
            image_url = None
            
            # Get the first available image for this subtopic
            if (subtopic_key in lesson_data['unsplash_images'] and 
                lesson_data['unsplash_images'][subtopic_key]):
                # Use the first image if no selection was made
                if (subtopic_key in lesson_data['selected_images'] and 
                    lesson_data['selected_images'][subtopic_key] is not None):
                    selected_idx = lesson_data['selected_images'][subtopic_key]
                    if selected_idx < len(lesson_data['unsplash_images'][subtopic_key]):
                        image_url = lesson_data['unsplash_images'][subtopic_key][selected_idx].get('url')
                else:
                    # Default to first image if available
                    if lesson_data['unsplash_images'][subtopic_key]:
                        image_url = lesson_data['unsplash_images'][subtopic_key][0].get('url')

            content = (
                f"{subtopic.get('content', 'No content provided')}\n\n"
                f"Key Concepts: {', '.join(subtopic.get('key_concepts', ['N/A']))}\n"
                f"Example: {subtopic.get('examples', ['N/A'])[0]}\n"
                f"Common Misconception: {subtopic.get('misconceptions', ['N/A'])[0]}"
            )

            add_content_slide(
                prs,
                f"Part {i}: {subtopic.get('title', 'Untitled')}",
                clean_text(content),
                image_url
            )

        # Summary (with improved formatting)
        if lesson_data['summary']:
            summary_text = clean_text(lesson_data['summary'])
            # Split summary into multiple slides if needed
            add_content_slide(prs, "Lesson Summary", summary_text)

        # References (formatted as clickable links with proper domains)
        if lesson_data['references']:
            ref_text = "\n".join(
                [f"â€¢ {ref.get('title', ref.get('domain', 'Reference'))}\n  {ref.get('url', 'No link')}"
                 for ref in lesson_data['references'][:5]]  # Limit to 5 references
            )
            add_content_slide(prs, "Recommended References", ref_text)

        # Quiz Slides - One per question type
        if lesson_data['quiz_data']:
            # Multiple Choice Questions
            if lesson_data['quiz_data'].get('mcq'):
                add_quiz_slide(prs, 'mcq', lesson_data['quiz_data']['mcq'])
            
            # Fill in the Blank Questions
            if lesson_data['quiz_data'].get('fillblank'):
                add_quiz_slide(prs, 'fillblank', lesson_data['quiz_data']['fillblank'])
            
            # Descriptive Questions
            if lesson_data['quiz_data'].get('descriptive'):
                add_quiz_slide(prs, 'descriptive', lesson_data['quiz_data']['descriptive'])

        # Thank You slide with company name
        thank_you_text = (
            "Thank you for using this lesson presentation!\n\n"
            "Generated by EduGenius Pro\n"
            "AI-Powered Lesson Planning"
        )
        add_content_slide(prs, "Thank You!", thank_you_text)

        # Save to buffer
        ppt_buffer = io.BytesIO()
        prs.save(ppt_buffer)
        ppt_buffer.seek(0)
        return ppt_buffer

    except Exception as e:
        raise Exception(f"Error generating PPT: {str(e)}")